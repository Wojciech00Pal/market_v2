@page  "/products"

@inject NavigationManager NavigationManager 
@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IDeleteProductUseCase DeleteProductUseCase

<h3>Products</h3>
<br />

@if (products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in products)
            {
                <tr>
                    <td>@GetCategoryByIdUseCase.Execute(prod.CategoryId.Value)?.Name</td>
                    <td>@prod.Name</td>
                    <td>@Math.Round((prod.Price), 2)</td>
                    <td>@prod.Quantity</td>
                    <td>
                        <button type="button" class="btn btn-link" @onclick="@(()=>OnEditProduct(prod))">Edit</button>
                        &nbsp;
                        <button type="button" class="btn btn-link" @onclick="@(()=>OnDeleteProduct(prod.ProductId))">Delete</button>
                    </td>

                </tr>
            }

        </tbody>
    </table>

}
<button type="button" @onclick="NavigateAddProduct" class="btn btn-primary">Add Product</button>


@code {
    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        products = ViewProductsUseCase.Execute();

    }

    private void NavigateAddProduct()
    {
        NavigationManager.NavigateTo("/addProduct");
    }
    private void OnEditProduct(Product product)
    {
        NavigationManager.NavigateTo($"editProduct/{product.ProductId}");
    }
    private void  OnDeleteProduct(int productId)
    {
        DeleteProductUseCase.Execute(productId);

    }
}
